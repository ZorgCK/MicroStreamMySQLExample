
package com.company.microstreammysql.ui;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;

import com.company.microstreammysql.entities.Customer;
import com.company.microstreammysql.microstream.MicroStream;
import com.google.gson.JsonIOException;
import com.google.gson.JsonSyntaxException;
import com.rapidclipse.framework.server.resources.CaptionUtils;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.server.InitialPageSettings;
import com.vaadin.flow.server.PageConfigurator;


@Route("")
public class MainLayout extends VerticalLayout implements PageConfigurator
{
	public MainLayout()
	{
		super();
		this.initUI();
	}
	
	@Override
	public void configurePage(final InitialPageSettings settings)
	{
		settings.addLink("shortcut icon", "frontend/images/favicon.ico");
		settings.addFavIcon("icon", "frontend/images/favicon256.png", "256x256");
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #button2}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void button2_onClick(final ClickEvent<Button> event)
	{
		try
		{
			final List<Customer> loadCustomers = DataSourceUtils.loadCustomers();
			MicroStream.root().getCustomers().addAll(loadCustomers);
			MicroStream.storageManager().store(MicroStream.root().getCustomers());
			
			this.grid.setItems(MicroStream.root().getCustomers());
		}
		catch(final JsonSyntaxException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch(final JsonIOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch(final FileNotFoundException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch(final IOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.button2 = new Button();
		this.grid    = new Grid<>(Customer.class, false);

		this.button2.setText("Button");
		this.grid.addColumn(Customer::getName).setKey("name")
			.setHeader(CaptionUtils.resolveCaption(Customer.class, "name"))
			.setSortable(true);
		this.grid.addColumn(Customer::getCompany).setKey("company")
			.setHeader(CaptionUtils.resolveCaption(Customer.class, "company")).setSortable(true);
		this.grid.addColumn(Customer::getMail).setKey("mail")
			.setHeader(CaptionUtils.resolveCaption(Customer.class, "mail"))
			.setSortable(true);
		this.grid.addColumn(Customer::getCity).setKey("city")
			.setHeader(CaptionUtils.resolveCaption(Customer.class, "city"))
			.setSortable(true);
		this.grid.setSelectionMode(Grid.SelectionMode.SINGLE);

		this.button2.setSizeUndefined();
		this.grid.setSizeFull();
		this.add(this.button2, this.grid);
		this.setFlexGrow(1.0, this.grid);
		this.setSizeFull();

		this.button2.addClickListener(this::button2_onClick);
	} // </generated-code>
	
	// <generated-code name="variables">
	private Grid<Customer> grid;
	private Button         button2;
	// </generated-code>
	
}
